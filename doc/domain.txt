package com.github.dstoianov

import java.io.Serializable
import javax.persistence.*
import org.hibernate.Hibernate
import org.hibernate.annotations.NaturalId


@Table(name = "project")
@Entity
data class Project(
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id", nullable = false)
    val id: Long? = null
) {

    @Column(name = "name", nullable = false)
    var name: String? = null

    @ManyToOne(fetch = FetchType.LAZY, optional = false)
    @JoinColumn(name = "client_id", nullable = false)
    lateinit var client: Client

    fun isNew(): Boolean = id == null


    // https://vladmihalcea.com/how-to-implement-equals-and-hashcode-using-the-jpa-entity-identifier/

    override fun hashCode(): Int {
        return this::class.hashCode()
    }
}

@Table(name = "client")
@Entity
data class Client(
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id", nullable = false)
    val id: Long? = null
) {

    @Column(name = "name", nullable = false)
    lateinit var name: String

    @OneToMany(mappedBy = "client")
    var projects: MutableSet<Project> = mutableSetOf()

    @OneToMany(mappedBy = "client")
    var contacts: MutableSet<Contact> = mutableSetOf()
}

@Table(name = "contact")
@Entity
data class Contact(
    /**
     * If the entity has a natural or client-generated id, it makes sense to put it in the constructor,
     * so the object cannot be created without it.
     *
     * Since it does not change during the entity lifecycle, it can be used in equals() and hashCode().
     */
    @Id
    @NaturalId
    @Column(name = "email", nullable = false)
    val email: String,

    @Column(name = "name", nullable = false)
    var name: String,

    @ManyToOne(fetch = FetchType.LAZY, optional = false)
    @JoinColumn(name = "client_id", nullable = false)
    var client: Client,
)


@MappedSuperclass
open class BaseLongIdEntity() : Serializable {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id", nullable = false)
    open var id: Long? = null

    override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (other !is BaseLongIdEntity) return false
        if (Hibernate.getClass(this) != Hibernate.getClass(other)) return false


        return id != null && id == other.id
    }

    override fun hashCode(): Int = javaClass.hashCode()
}